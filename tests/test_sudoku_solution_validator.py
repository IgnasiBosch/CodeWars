from unittest import TestCase
from src.sudoku_solution_validator import valid_solution


class TestGapInPrimes(TestCase):
    def test_1(self):
        board = [[5, 3, 4, 6, 7, 8, 9, 1, 2],
                 [6, 7, 2, 1, 9, 5, 3, 4, 8],
                 [1, 9, 8, 3, 4, 2, 5, 6, 7],
                 [8, 5, 9, 7, 6, 1, 4, 2, 3],
                 [4, 2, 6, 8, 5, 3, 7, 9, 1],
                 [7, 1, 3, 9, 2, 4, 8, 5, 6],
                 [9, 6, 1, 5, 3, 7, 2, 8, 4],
                 [2, 8, 7, 4, 1, 9, 6, 3, 5],
                 [3, 4, 5, 2, 8, 6, 1, 7, 9]]

        self.assertTrue(valid_solution(board))

    def test_2(self):
        board = [[5, 3, 4, 6, 7, 8, 9, 1, 2],
                 [6, 7, 2, 1, 9, 0, 3, 4, 9],
                 [1, 0, 0, 3, 4, 2, 5, 6, 0],
                 [8, 5, 9, 7, 6, 1, 0, 2, 0],
                 [4, 2, 6, 8, 5, 3, 7, 9, 1],
                 [7, 1, 3, 9, 2, 4, 8, 5, 6],
                 [9, 0, 1, 5, 3, 7, 2, 1, 4],
                 [2, 8, 7, 4, 1, 9, 6, 3, 5],
                 [3, 0, 0, 4, 8, 1, 1, 7, 9]]

        self.assertFalse(valid_solution(board))

    def test_3(self):
        board = [
            [7, 8, 4, 1, 5, 9, 3, 2, 6],
            [5, 3, 9, 6, 7, 2, 8, 4, 1],
            [6, 1, 2, 4, 3, 8, 7, 5, 9],

            [9, 2, 8, 7, 1, 5, 4, 6, 3],
            [3, 5, 7, 8, 4, 6, 1, 9, 2],
            [4, 6, 1, 9, 2, 3, 5, 8, 7],

            [8, 7, 6, 3, 9, 4, 2, 1, 5],
            [2, 4, 3, 5, 6, 1, 9, 7, 8],
            [1, 9, 5, 2, 8, 7, 6, 3, 4]
        ]

        self.assertTrue(valid_solution(board))

    def test_4(self):
        board = [
            [7, 8, 4, 1, 5, 9, 3, 2, 6],
            [5, 3, 9, 6, 7, 2, 8, 4, 1],
            [6, 1, 2, 4, 3, 8, 7, 5, 9],

            [9, 2, 8, 7, 1, 5, 4, 6, 3],
            [3, 5, 7, 8, 4, 6, 1, 9, 2],
            [4, 6, 1, 9, 2, 3, 5, 8, 7],

            [8, 7, 6, 3, 9, 4, 2, 1, 5],
            [2, 4, 3, 5, 6, 1, 9, 7, 8],
            [1, 9, 5, 2, 8, 7, 6, 3, 4]
        ]

        self.assertFalse(valid_solution(board))

    def test_5(self):
        board = [
            ['7', 8, 4, 1, 5, 9, 3, 2, 6],
            [5, 3, 9, 6, 7, 2, 8, 4, 1],
            [6, 1, 2, 4, 3, 8, 7, 5, 9],

            [9, 2, 8, 7, 1, 5, 4, 6, 3],
            [3, 5, 7, 8, 4, 6, 1, 9, 2],
            [4, 6, 1, 9, 2, 3, 5, 8, 7],

            [8, 7, 6, 3, 9, 4, 2, 1, 5],
            [2, 4, 3, 5, 6, 1, 9, 7, 8],
            [1, 9, 5, 2, 8, 7, 6, 3, 4]
        ]

        self.assertFalse(valid_solution(board))

    def test_6(self):
        board = [
            [7.9999, 8, 4, 1, 5, 9, 3, 2, 6],
            [5, 3, 9, 6, 7, 2, 8, 4, 1],
            [6, 1, 2, 4, 3, 8, 7, 5, 9],

            [9, 2, 8, 7, 1, 5, 4, 6, 3],
            [3, 5, 7, 8, 4, 6, 1, 9, 2],
            [4, 6, 1, 9, 2, 3, 5, 8, 7],

            [8, 7, 6, 3, 9, 4, 2, 1, 5],
            [2, 4, 3, 5, 6, 1, 9, 7, 8],
            [1, 9, 5, 2, 8, 7, 6, 3, 4]
        ]

        self.assertFalse(valid_solution(board))

    def test_7(self):
        board = [
            [1, 2, 3, 4, 5],
            [1, 2, 3, 4],
            [1, 2, 3, 4],
            [1]
        ]

        self.assertFalse(valid_solution(board))

    def test_8(self):
        board = [
            [1, 4, 2, 3],
            [3, 2, 4, 1],
            [4, 1, 3, 2],
            [2, 3, 1, 4]
        ]

        self.assertFalse(valid_solution(board))

    def test_9(self):
        board = [1]

        self.assertFalse(valid_solution(board))

    def test_10(self):
        board = True

        self.assertFalse(valid_solution(board))

    def test_11(self):
        board = [
            [1, 3, 2, 5, 7, 9, 4, 6, 8],
            [4, 9, 8, 2, 6, 1, 3, 7, 5],
            [7, 5, 6, 3, 8, 4, 2, 1, 9],
            [6, 4, 3, 1, 5, 8, 7, 9, 2],
            [5, 2, 1, 7, 9, 3, 8, 4, 6],
            [9, 8, 7, 4, 2, 6, 5, 3, 1],
            [2, 1, 4, 9, 3, 5, 6, 8, 7],
            [3, 6, 5, 8, 1, 7, 9, 2, 4],
            [8, 7, 9, 6, 4, 2, 1, 5, 3]
        ]

        self.assertTrue(valid_solution(board))

    def test_12(self):
        board = [
            [1, 3, 2, 5, 7, 9, 4, 6, 8],
            [4, 9, 8, 2, 6, 1, 3, 7, 5],
            [7, 5, 6, 3, 8, 4, 2, 1, 9],

            [6, 4, 3, 1, 5, 8, 7, 9, 2],
            [5, 2, 1, 7, 9, 3, 8, 4, 6],
            [9, 8, 7, 4, 2, 6, 5, 3, 1],

            [2, 1, 4, 9, 3, 5, 6, 8, 7],
            [3, 6, 5, 8, 1, 7, 9, 2, 4],
            [8, 7, 9, 6, 4, 2, 1, 3, 5]
        ]

        self.assertFalse(valid_solution(board))

